module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateShoe {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createShoe(data: ShoeCreateInput!): Shoe!
  updateShoe(data: ShoeUpdateInput!, where: ShoeWhereUniqueInput!): Shoe
  updateManyShoes(data: ShoeUpdateManyMutationInput!, where: ShoeWhereInput): BatchPayload!
  upsertShoe(where: ShoeWhereUniqueInput!, create: ShoeCreateInput!, update: ShoeUpdateInput!): Shoe!
  deleteShoe(where: ShoeWhereUniqueInput!): Shoe
  deleteManyShoes(where: ShoeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  shoe(where: ShoeWhereUniqueInput!): Shoe
  shoes(where: ShoeWhereInput, orderBy: ShoeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shoe]!
  shoesConnection(where: ShoeWhereInput, orderBy: ShoeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Shoe {
  id: ID!
  name: String!
  brand: String!
  sizes: [Float!]!
  price: Float!
}

type ShoeConnection {
  pageInfo: PageInfo!
  edges: [ShoeEdge]!
  aggregate: AggregateShoe!
}

input ShoeCreateInput {
  name: String!
  brand: String!
  sizes: ShoeCreatesizesInput
  price: Float!
}

input ShoeCreatesizesInput {
  set: [Float!]
}

type ShoeEdge {
  node: Shoe!
  cursor: String!
}

enum ShoeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  brand_ASC
  brand_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShoePreviousValues {
  id: ID!
  name: String!
  brand: String!
  sizes: [Float!]!
  price: Float!
}

type ShoeSubscriptionPayload {
  mutation: MutationType!
  node: Shoe
  updatedFields: [String!]
  previousValues: ShoePreviousValues
}

input ShoeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShoeWhereInput
  AND: [ShoeSubscriptionWhereInput!]
  OR: [ShoeSubscriptionWhereInput!]
  NOT: [ShoeSubscriptionWhereInput!]
}

input ShoeUpdateInput {
  name: String
  brand: String
  sizes: ShoeUpdatesizesInput
  price: Float
}

input ShoeUpdateManyMutationInput {
  name: String
  brand: String
  sizes: ShoeUpdatesizesInput
  price: Float
}

input ShoeUpdatesizesInput {
  set: [Float!]
}

input ShoeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [ShoeWhereInput!]
  OR: [ShoeWhereInput!]
  NOT: [ShoeWhereInput!]
}

input ShoeWhereUniqueInput {
  id: ID
}

type Subscription {
  shoe(where: ShoeSubscriptionWhereInput): ShoeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    